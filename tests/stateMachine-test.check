#include "../src/stateMachine.h"
#include "../src/inputStack.h"

/* All possible parameters for state machine functions. */
char* add_param = "-a";
char* delete_param = "-d";
char* tag_param1 = "tagName1";
char* tag_param2 = "tagName2";
char* type_param = "-t";
char* path_to_file_param1 = "/home/marcus/Documents/File Tagger/source/src/main.c";
char* path_to_file_param2 = "/home/marcus/Documents/File Tagger/source/src/stateMachine.c";
char* path_to_dir_param1 = "/home/marcus/Documents/File Tagger/source/src";
char* path_to_dir_param2 = "/home/marcus/Documents/File Tagger/source/tests";
char* select_param = "-s";
char* type_name_param1 = "png";
char* type_name_param2 = "jpeg";
char* recursive_param = "-r";
char* no_tag_param = "-n";
char* tag_only_param = "-tg";
char* error = "error";

char* error_msg = "Expected return value: %d - Actual return value: %d";

#test select_option_to_add_tag
	int ret_val = select_option_state(add_param);
	fail_unless(ret_val == add, error_msg, add, ret_val);

#test select_option_to_delete_tag
	int ret_val = select_option_state(delete_param);
	fail_unless(ret_val == del, error_msg, del, ret_val);

#test select_option_to_tags_selected
	int ret_val = select_option_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test select_option_to_reading_file_types
	int ret_val = select_option_state(type_param);
	fail_unless(ret_val == type, error_msg, type, ret_val);

#test select_option_to_search_dirs_selected
	int ret_val = select_option_state(path_to_dir_param1);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test select_option_to_search_all_tags
	int ret_val = select_option_state(select_param);
	fail_unless(ret_val == search, error_msg, search, ret_val);

#test add_tag_to_add_files_selected
	int ret_val = add_tag_state(path_to_file_param1);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test add_tag_to_add_dirs_selected
	int ret_val = add_tag_state(path_to_dir_param1);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test add_files_selected_to_add_tags_selected
	int ret_val = add_files_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test add_files_selected_to_add_files_selected
	int ret_val = add_files_selected_state(path_to_file_param2);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test add_dirs_selected_to_add_tags_selected
	int ret_val = add_dirs_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test add_dirs_selected_to_add_dirs_selected
	int ret_val = add_dirs_selected_state(path_to_dir_param1);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test add_dirs_selected_to_reading_file_type
	int ret_val = add_dirs_selected_state(type_param);
	fail_unless(ret_val == type, error_msg, type, ret_val);

#test reading_file_type_to_file_type_selected
	int ret_val = reading_file_type_state(type_name_param1);
	fail_unless(ret_val == type_name, error_msg, type_name, ret_val);

#test file_type_selected_to_add_tags_selected
	int ret_val = file_type_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test file_type_selected_to_file_type_selected
	int ret_val = file_type_selected_state(type_name_param2);
	fail_unless(ret_val == type_name, error_msg, type_name, ret_val);

#test add_tags_selected_to_add_tags_selected
	int ret_val = add_tags_selected_state(tag_param2);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test add_tags_selected_to_end
	int ret_val = add_tags_selected_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test delete_tag_to_delete_all_tags
	int ret_val = delete_tag_state(recursive_param);
	fail_unless(ret_val == recursive, error_msg, recursive, ret_val);

#test delete_tag_to_delete_tags_selected
	int ret_val = delete_tag_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test delete_tag_to_delete_files_selected
	int ret_val = delete_tag_state(path_to_file_param1);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test delete_tag_to_delete_dirs_selected
	int ret_val = delete_tag_state(path_to_dir_param1);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test delete_all_tags_to_delete_all_files_selected
	int ret_val = delete_all_tags_state(path_to_file_param1);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test delete_all_tags_to_delete_all_dirs_selected
	int ret_val = delete_all_tags_state(path_to_dir_param1);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test delete_files_selected_to_delete_files_selected
	int ret_val = delete_files_selected_state(path_to_file_param2);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test delete_files_selected_to_delete_tags_selected
	int ret_val = delete_files_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test delete_dirs_selected_to_delete_dirs_selected
	int ret_val = delete_dirs_selected_state(path_to_dir_param2);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test delete_dirs_selected_to_delete_tags_selected
	int ret_val = delete_dirs_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test delete_all_files_selected_to_delete_all_files_selected
	int ret_val = delete_all_files_selected_state(path_to_file_param2);
	fail_unless(ret_val == path_to_file, error_msg, path_to_file, ret_val);

#test delete_all_files_selected_to_end
	int ret_val = delete_all_files_selected_state(error); 
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test delete_all_dirs_selected_to_delete_all_dirs_selected
	int ret_val = delete_all_dirs_selected_state(path_to_dir_param2); 
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test delete_all_dirs_selected_to_end
	int ret_val = delete_all_dirs_selected_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test delete_tags_selected_to_delete_tags_selected
	int ret_val = delete_tags_selected_state(tag_param2);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test delete_tags_selected_to_end
	int ret_val = delete_tags_selected_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test tags_selected_to_tags_selected
	int ret_val = tags_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test tags_selected_to_end
	int ret_val = tags_selected_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test reading_file_types_to_file_types_selected
	int ret_val = reading_file_types_state(type_name_param1);
	fail_unless(ret_val == type_name, error_msg, type_name, ret_val);

#test search_dirs_selected_to_search_dirs_selected
	int ret_val = search_dir_selected_state(path_to_dir_param2);
	fail_unless(ret_val == path_to_dir, error_msg, path_to_dir, ret_val);

#test search_dirs_selected_to_reading_file_types
	int ret_val = search_dir_selected_state(type_param);
	fail_unless(ret_val == type, error_msg, type, ret_val);

#test search_dirs_selected_to_tags_selected
	int ret_val = search_dir_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test search_all_tags_to_search_no_tags
	int ret_val = search_all_tags_state(no_tag_param);
	fail_unless(ret_val == no_tag, error_msg, no_tag, ret_val);

#test search_all_tags_to_search_tags_only
	int ret_val = search_all_tags_state(tag_only_param);
	fail_unless(ret_val == tag_only, error_msg, tag_only, ret_val);

#test search_all_tags_to_end
	int ret_val = search_all_tags_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test file_types_selected_to_file_types_selected
	int ret_val = file_types_selected_state(type_name_param1);
	fail_unless(ret_val == type_name, error_msg, type_name, ret_val);

#test file_types_selected_to_tags_selected
	int ret_val = file_types_selected_state(tag_param1);
	fail_unless(ret_val == tag_name, error_msg, tag_name, ret_val);

#test search_no_tags_to_end
	int ret_val = search_no_tags_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);

#test search_tags_only_to_end
	int ret_val = search_tags_only_state(error);
	fail_unless(ret_val == end, error_msg, end, ret_val);
