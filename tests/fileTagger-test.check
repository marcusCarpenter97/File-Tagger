#include "../fileTagger.h"

#define SIZEOF(x) (int) (sizeof(x) / sizeof(x[0]) - 1)

char program_name[] = "tag";

char path_to_file_1[] = "path/to/file1";
char path_to_file_2[] = "path/to/file2";

char path_to_dir_1[] = "path/to/dir1";
char path_to_dir_2[] = "path/to/dir2";

char tag_1[] = "first";
char tag_2[] = "second";
char tag_3[] = "third";

char delete_1[] = "-d";
char delete_2[] = "--delete";
char delete_all[] = "-da";

char list_tags_1[] = "-l";
char list_tags_2[] = "--list";

char list_all_1[] = "-a";
char list_all_2[] = "--all";

char no_tag_1[] = "-n";
char no_tag_2[] = "--notag";

#test verify_input_one_file_one_tag
	/* Add, one file, one tag */
	char *one_file_one_tag[] = {program_name, path_to_file_1, tag_1}; 
	fail_unless(verify_input(SIZEOF(one_file_one_tag), one_file_one_tag) == 1, "Meant to fail!");

#test verify_input_one_file_many_tag
	/* Add, one file, multiple tags */
	char *one_file_many_tags[] = {program_name, path_to_file_1, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(one_file_many_tags), one_file_many_tags) == 1, "Meant to fail!");

#test verify_input_many_files_one_tag
	/* Add, multiple files, one tag */
	char *many_files_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_files_one_tag), many_files_one_tag) == 1, "Meant to fail!");

#test verify_input_many_files_many_tags
	/* Add, multiple files, multiple tags */
	char *many_files_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(many_files_one_tag), many_files_one_tag) == 1, "Meant to fail!");

#test verify_input_one_directory_one_tag
	/* Add, one directory, one tag */
	char *one_directory_one_tag[] = {program_name, path_to_dir_1, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_one_tag), one_directory_one_tag) == 1, "Meant to fail!");

#test verify_input_one_directory_many_tags
	/* Add, one directory, multiple tags */
	char *one_directory_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_many_tags), one_directory_many_tags) == 1, "Meant to fail!");

#test verify_input_many_directory_one_tag
	/* Add, multiple directories, one tag */
	char *many_directory_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_one_tag), many_directory_one_tag) == 1, "Meant to fail!");

#test verify_input_many_directory_many_tags
	/* Add, multiple directories, multiple tags */
	char *many_directory_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_many_tags), many_directory_many_tags) == 1, "Meant to fail!");

#test verify_input_one_directory_one_type_one_tag
	/* Add, one directory, one file type, one tag */
	char *one_directory_one_type_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_one_type_one_tag), one_directory_one_type_one_tag) == 1, "Meant to fail!");

#test verify_input_one_directory_one_type_many_tags
	/* Add, one directory, one file type, multiple tags */
	char *one_directory_one_type_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_one_type_many_tags), one_directory_one_type_many_tags) == 1, "Meant to fail!");

#test verify_input_many_directory_one_type_one_tag
	/* Add, multiple directories, one file type, one tag */
	char *many_directory_one_type_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_one_type_one_tag), many_directory_one_type_one_tag) == 1, "Meant to fail!");

#test verify_input_many_directory_one_type_many_tags
	/* Add, multiple directiries, one file type, multiple tags */
	char *many_directory_one_type_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_one_type_many_tags), many_directory_one_type_many_tags) == 1, "Meant to fail!");

#test verify_input_one_directory_many_types_one_tag
	/* Add, one directory, multiple file types, one tag */
	char *one_directory_many_types_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_many_types_one_tag), one_directory_many_types_one_tag) == 1, "Meant to fail!");

#test verify_input_one_directory_many_types_many_tags
	/* Add, one directory, multiple file types, multiple tags */
	char *one_directory_many_types_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(one_directory_many_types_many_tags), one_directory_many_types_many_tags) == 1, "Meant to fail!");

#test verify_input_many_directory_many_types_one_tag
	/* Add, multiple directories, multiple file types, one tag */
	char *many_directory_many_types_one_tag[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_many_types_one_tag), many_directory_many_types_one_tag) == 1, "Meant to fail!");

#test verify_input_many_directory_many_types_many_tags
	/* Add, multiple directories, multiple file types, multiple tags */
	char *many_directory_many_types_many_tags[] = {program_name, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(many_directory_many_types_many_tags), many_directory_many_types_many_tags) == 1, "Meant to fail!");

#test verify_delete_one_file_one_tag
	/* Delete, one file, one tag */
	char *delete_one_file_one_tag[] = {program_name, delete_1, path_to_file_1, tag_1};
	fail_unless(verify_input(SIZEOF(delete_one_file_one_tag), delete_one_file_one_tag) == 1, "Meant to fail!");

#test verify_delete_one_file_many_tags
	/* Delete, one file, multiple tags */
	char *delete_one_file_many_tags[] = {program_name, delete_1, path_to_file_1, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(delete_one_file_many_tags), delete_one_file_many_tags) == 1, "Meant to fail!");

#test verify_delete_many_files_one_tag
	/* Delete, multiple files, one tag */
	char *delete_many_files_one_tag[] = {program_name, delete_1, path_to_file_1, path_to_file_2, tag_1};
	fail_unless(verify_input(SIZEOF(delete_many_files_one_tag), delete_many_files_one_tag) == 1, "Meant to fail!");

#test verify_delete_many_files_many_tag
	/* Delete, multiple files, multiple tags */
	char *delete_many_files_many_tag[] = {program_name, delete_1, path_to_file_1, path_to_file_2, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(delete_many_files_many_tag), delete_many_files_many_tag) == 2, "Meant to fail!");

#test verify_delete_one_file_all_tags
	/* Delete, one file, all tags */
	char *delete_one_file_all_tags[] = {program_name, delete_all, path_to_file_1};
	fail_unless(verify_input(SIZEOF(delete_one_file_all_tags), delete_one_file_all_tags) == 1, "Meant to fail!");

#test verify_delete_many_files_all_tags
	/* Delete, multiple files, all tags */
	char *delete_many_files_all_tags[] = {program_name, delete_all, path_to_file_1, path_to_file_2};
	fail_unless(verify_input(SIZEOF(delete_many_files_all_tags), delete_many_files_all_tags) == 1, "Meant to fail!");

#test verify_delete_one_directory_one_tag
	/* Delete, one directory, one tag */
	char *delete_one_file_one_tag[] = {program_name, delete_1,  path_to_dir_1, tag_1};
	fail_unless(verify_input(SIZEOF(delete_one_file_one_tag), delete_one_file_one_tag) == 1, "Meant to fail!");

#test verify_delete_one_directory_many_tags
	/* Delete, one directory, multiple tags */
	char *delete_one_directory_many_tags[] = {program_name, delete_1, path_to_dir_1, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(delete_one_directory_many_tags), delete_one_directory_many_tags) == 1, "Meant to fail!");

#test verify_delete_many_directories_one_tag
	/* Delete, multiple directories, one tag */
	char *delete_many_directories_one_tag[] = {program_name, delete_1, path_to_dir_1, path_to_dir_2, tag_1};
	fail_unless(verify_input(SIZEOF(delete_many_directories_one_tag), delete_many_directories_one_tag) == 1, "Meant to fail!");

#test verify_delete_many_directories_many_tag
	/* Delete, multiple directories, multiple tags */
	char *delete_many_directories_many_tag[] = {program_name, delete_1, path_to_dir_1, path_to_dir_2, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(delete_many_directories_many_tag), delete_many_directories_many_tag) == 1, "Meant to fail!");

#test verify_delete_one_directory_all_tags
	/* Delete, one directory, all tags */
	char *delete_one_directory_all_tags[] = {program_name, delete_all, path_to_dir_1};
	fail_unless(verify_input(SIZEOF(delete_one_directory_all_tags), delete_one_directory_all_tags) == 1, "Meant to fail!");

#test verify_delete_many_directory_all_tags
	/* Delete, multiple directories, all tags */
	char *delete_many_directory_all_tags[] = {program_name, delete_all, path_to_file_1, path_to_file_2};
	fail_unless(verify_input(SIZEOF(delete_many_directory_all_tags), delete_many_directory_all_tags) == 1, "Meant to fail!");

#test verify_delete_one_tag
	/* Delete, one tag from system */
	char *delete_one_tag[] = {program_name, delete_1, tag_1};
	fail_unless(verify_input(SIZEOF(delete_one_tag), delete_one_tag) == 1, "Meant to fail!");

#test verify_delete_many_tags
	/* Delete, multiple tags from system */
	char *delete_many_tags[] = {program_name, delete_1, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(delete_many_tags), delete_many_tags) == 1, "Meant to fail!");

#test verify_search_all_files_one_tag
	/* Search, all files, one tag */
	char *search_all_files_one_tag[] = {program_name, tag_1};
	fail_unless(verify_input(SIZEOF(search_all_files_one_tag), search_all_files_one_tag) == 1, "Meant to fail!");

#test verify_search_all_files_many_tags
	/* Search, all files, multiple tags */
	char *search_all_files_many_tags[] = {program_name, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(search_all_files_many_tags), search_all_files_many_tags) == 1, "Meant to fail!");

#test verify_search_all_tags_no_files
	/* Search, all tags, no files */
	char *search_all_tags_no_files[] = {program_name, list_tags_1};
	fail_unless(verify_input(SIZEOF(search_all_tags_no_files), search_all_tags_no_files) == 1, "Meant to fail!");

#test verify_search_all_files_all_tags
	/* Search, all tagged files, with tags */
	char *search_all_files_all_tags[] = {program_name, list_all_1};
	fail_unless(verify_input(SIZEOF(search_all_files_all_tags), search_all_files_all_tags) == 1, "Meant to fail!");

#test verify_search_all_files_no_tags
	/* Search, all tagged files, no tags */
	char *search_all_files_no_tags[] = {program_name, no_tag_1};
	fail_unless(verify_input(SIZEOF(search_all_files_no_tags), search_all_files_no_tags) == 1, "Meant to fail!");

#test verify_search_one_directory_one_tag
	/* Search, one directory, one tag */
	char *search_one_directory_one_tag[] = {program_name, list_tags_1, path_to_dir_1, tag_1};
	fail_unless(verify_input(SIZEOF(search_one_directory_one_tag), search_one_directory_one_tag) == 1, "Meant to fail!");

#test verify_search_one_directory_many_tags
	/* Search, one directory, multiple tags */
	char *search_one_directory_many_tags[] = {program_name, list_tags_1, path_to_dir_1, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(search_one_directory_many_tags), search_one_directory_many_tags) == 1, "Meant to fail!");

#test verify_search_many_directories_one_tag
	/* Search, multiple directories, one tag */
	char *search_many_directories_one_tag[] = {program_name, list_tags_1, path_to_dir_1, path_to_dir_2, tag_1};
	fail_unless(verify_input(SIZEOF(search_many_directories_one_tag), search_many_directories_one_tag) == 1, "Meant to fail!");

#test verify_search_many_directories_many_tags
	/* Search, multiple directories, multiple tags */
	char *search_many_directories_many_tags[] = {program_name, list_tags_1, path_to_dir_1, path_to_dir_2, tag_1, tag_2, tag_3};
	fail_unless(verify_input(SIZEOF(search_many_directories_many_tags), search_many_directories_many_tags) == 1, "Meant to fail!");
